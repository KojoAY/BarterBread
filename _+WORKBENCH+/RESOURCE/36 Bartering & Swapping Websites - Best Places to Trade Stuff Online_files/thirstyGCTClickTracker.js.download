jQuery( document ).ready( function ( $ ) {

    // All links inside the body either presently existent right now or to be added in the future.
    $( "body" ).delegate( 'a' , 'click' , function () {

        var $this = $( this );

        // Only cater links that has href
        if ( $this.attr( 'href' ) ) {

            if ( $this.attr( 'data-thirsty_gct_link_id' ) ) {

                // Newly inserted affiliate link ( Much faster to deal with )

                if ( thirsty_gct_global_vars.use_legacy_analytics == 'on' ) {
                    _gaq.push( [ '_trackEvent' , thirsty_gct_global_vars.custom_action_name , $this.attr( 'data-thirsty_gct_link_name' ) , $this.attr( 'data-thirsty_gct_link_post_permalink' ) , , false ] );
                } else {
                    if (thirsty_gct_global_vars.is_yoast) {
                        __gaTracker( 'send' , 'event' , thirsty_gct_global_vars.custom_action_name , $this.attr( 'data-thirsty_gct_link_name' ), $this.attr( 'data-thirsty_gct_link_post_permalink' ) );
                    } else {
                        ga( 'send' , 'event' , thirsty_gct_global_vars.custom_action_name , $this.attr( 'data-thirsty_gct_link_name' ), $this.attr( 'data-thirsty_gct_link_post_permalink' ) );
                    }
                }

            } else {

                // This could be an affiliate link previously added ( Needs to deal with this differently )
                if ( $this.attr( "href" ).indexOf( thirsty_gct_global_vars.home_url + thirsty_gct_global_vars.link_prefix + '/' ) > -1 ) {

                    // Yup this is an affiliate link added previously

                    // Get the link name
                    var link_name = $this.attr( "href" ).replace( thirsty_gct_global_vars.home_url + thirsty_gct_global_vars.link_prefix + '/' , '' );
                        link_name = link_name.replace( '/' , '' );

                    // Get the post permalink
                    var post_permalink = "";

                    if ( thirsty_gct_global_vars.use_post_url == 'on' )
                        post_permalink = gct_parse_url( document.URL , 'PHP_URL_PATH' );
                    else
                        post_permalink = gct_parse_url( $this.attr( "href" ) , 'PHP_URL_PATH' );

                    if ( thirsty_gct_global_vars.use_legacy_analytics == 'on' ){
                        _gaq.push( [ '_trackEvent' , thirsty_gct_global_vars.custom_action_name , link_name , post_permalink , , false ] );
                    } else {
                        if (thirsty_gct_global_vars.is_yoast) {
                            __gaTracker( 'send' , 'event' , thirsty_gct_global_vars.custom_action_name , link_name , post_permalink );
                        } else {
                            ga( 'send' , 'event' , thirsty_gct_global_vars.custom_action_name , link_name , post_permalink );
                        }
                    }

                }

            }

        }

    } );

} );

/**
 * gct_parse_url
 * A PHP parse_url equivalent for javascript. Namespaced to GCT add-on.
 *
 * @param str
 * @param component
 * @returns {*}
 *
 * @since 1.3
 */
function gct_parse_url( str , component ) {

    var query, key = ['source', 'scheme', 'authority', 'userInfo', 'user', 'pass', 'host', 'port',
            'relative', 'path', 'directory', 'file', 'query', 'fragment'
        ],
        ini = (this.php_js && this.php_js.ini) || {},
        mode = (ini['phpjs.gct_parse_url.mode'] &&
            ini['phpjs.gct_parse_url.mode'].local_value) || 'php',
        parser = {
            php: /^(?:([^:\/?#]+):)?(?:\/\/()(?:(?:()(?:([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?))?()(?:(()(?:(?:[^?#\/]*\/)*)()(?:[^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
            strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
            loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/\/?)?((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/ // Added one optional slash to post-scheme to catch file:/// (should restrict this)
        };

    var m = parser[mode].exec(str),
        uri = {},
        i = 14;
    while (i--) {
        if (m[i]) {
            uri[key[i]] = m[i];
        }
    }

    if (component) {
        return uri[component.replace('PHP_URL_', '')
            .toLowerCase()];
    }
    if (mode !== 'php') {
        var name = (ini['phpjs.gct_parse_url.queryKey'] &&
            ini['phpjs.gct_parse_url.queryKey'].local_value) || 'queryKey';
        parser = /(?:^|&)([^&=]*)=?([^&]*)/g;
        uri[name] = {};
        query = uri[key[12]] || '';
        query.replace(parser, function($0, $1, $2) {
            if ($1) {
                uri[name][$1] = $2;
            }
        });
    }

    delete uri.source;
    return uri;

}
